
- Support "common" attributes
- Support custom attributes for custom reflectors

- Write some simple usage instructions in the README, including the syntax to use to be able to use the plugin in a user's
  metaprogram.

- Acceleration trick to try: when deserialising a type, build its "vtable" in memory beforehand and hash it, and compare with the stored
  vtable of the source type (just the hash first, then the full vtable if it matches). If they're identical, just read the entire
  type in in one go.

- Would be interesting to write a reference C++ version for comparing times etc

- A good point raised while using the lib as a module: what's the plan for when people want to serialise structs they don't control
  (declared in an external module)? Ideally we'd like to provide a mechanism similar to the Flatbuffers schema or something that would
  allow the same level of cross-version compatibility offered by the field ids mechanism?

- Profile with VTune etc

- Make the generator available as a metaprogram plugin, so people don't have to write their own metaprogram to use this
  https://github.com/Ivo-Balbaert/The_Way_to_Jai/blob/main/book/36_Plugins.md

- Once the basic functionality is in place, as a fun excersice, it'd be cool to make additional output formats (besides ImGui & json),
  like for example, output a 010 Editor template so that the binary data can be easily inspected & edited.
  https://www.sweetscape.com/010editor/templates.html

- Another application that would be extremely useful, is to explore the possibility of developing a binary hierarchy diff tool.
  Investigate what would be some good ways of detecting, displaying, storing & merging the differences in a hierarchy tree..
  This would be HUGE for gamedev, hot reloading etc!

- Rewatch https://youtu.be/ZQ5_u8Lgvyk?si=bH2_A2ffDxKQxbhN for pointers on how to actually turn this into a library

- Some interesting talks / reading about parsing Json:
  https://www.youtube.com/watch?v=wlvKAT7SZIQ
  https://www.youtube.com/watch?v=vd9J9PPmAMM
  https://github.com/simdjson/simdjson#about-simdjson

